Object subclass: #Address	instanceVariableNames: 'id streetName streetNumber town zipCode province'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:08'!zipCode: aZipCode 	zipCode := aZipCode! !!Address methodsFor: 'zip code' stamp: 'HernanWilkinson 10/28/2016 16:13'!zipCode	^zipCode! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:11'!province	^province! !!Address methodsFor: 'province' stamp: 'HernanWilkinson 10/28/2016 16:08'!province: aProvince 	province := aProvince	! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetNumber: aStreetNumber 	streetNumber := aStreetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 13:27'!streetName: aStreetName 	streetName := aStreetName ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetNumber	^streetNumber ! !!Address methodsFor: 'street' stamp: 'HernanWilkinson 10/28/2016 16:12'!streetName	^streetName ! !!Address methodsFor: 'as yet unclassified' stamp: 'HernanWilkinson 11/1/2016 10:06'!isAt: aStreetName	^streetName = aStreetName ! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:12'!town	^town! !!Address methodsFor: 'twon' stamp: 'HernanWilkinson 10/28/2016 16:07'!town: aTown 	town := aTown! !Object subclass: #Environment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Environment methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/21/2017 17:54'!createErpSystem	self subclassResponsibility ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Environment class	instanceVariableNames: ''!!Environment class methodsFor: 'as yet unclassified' stamp: 'Julian 11/16/2017 20:40'!current	^self allSubclasses		detect: [ :anEnvironmentClass | anEnvironmentClass isCurrent ]		ifFound: [:anEnvironmentClass | anEnvironmentClass new]		ifNone: [ self error: 'No environment found' ]! !!Environment class methodsFor: 'testing' stamp: 'Julian 11/16/2017 20:48'!isCurrent	self subclassResponsibility.! !Environment subclass: #DevelopmentEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!DevelopmentEnvironment methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/21/2017 17:54'!createErpSystem	^TransientErpSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DevelopmentEnvironment class	instanceVariableNames: ''!!DevelopmentEnvironment class methodsFor: 'as yet unclassified' stamp: 'Julian 11/16/2017 20:42'!isCurrent		^IntegrationEnvironment isCurrent not.! !TestCase subclass: #ErpImportTest	instanceVariableNames: 'importer system'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 20:54'!testCanNotImportSuppliersExistingCustomerRecordWithMoreThanFiveFields		self		should: [ self importSuppliersFrom: self suppliersExistingCustomerWithMoreThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .			self assert: self alwaysImportedSupplier customersIsEmpty  ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 20:55'!testShouldNotImportSupplierExistingCustomersRecordsStartingDifferentThanEC	self		should: [ self				importSuppliersFrom: self supplierExistingCostumersRecordStartingDifferentThanECTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: system isCustomersEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 20:35'!testCanNotImportSuppliersNewCustomerRecordWithMoreThanFiveFields		self		should: [ self importSuppliersFrom: self suppliersNewCustomerWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .			self assert: self alwaysImportedSupplier customersIsEmpty  ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 19:19'!testShouldNotImportSupplierAddressRecordsStartingWithMoreThanA	self 		should: [ self importSuppliersFrom: self supplierAddressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 19:17'!testCanNotImportSupplierAddressRecordWithMoreThanSixFields	self 		should: [ self importSuppliersFrom: self supplierAddressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]	! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 18:53'!testCanNotImportSupplierRecordWithLessThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithLessThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system isSuppliersEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 20:50'!testShouldNotImportSupplierNewCustomersRecordsStartingDifferentThanNC	self		should: [ self				importSuppliersFrom: self supplierNewCostumersRecordStartingDifferentThanNCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: system isCustomersEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 19:20'!testShouldNotImportSupplierRecordsStartingWithMoreThanS	self		should: [ self				importSuppliersFrom: self supplierRecordStartingWithMoreThanOneSTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: system isSuppliersEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 19:17'!testCanNotImportSupplierAddressRecordWithLessThanSixFields		self		should: [ self importSuppliersFrom: self supplierAddressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 20:15'!testCanNotImportSuppliersNewCustomerRecordWithLessThanFiveFields		self		should: [ self importSuppliersFrom: self suppliersNewCustomerWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidCustomerRecordErrorDescription .			self assert: self alwaysImportedSupplier customersIsEmpty  ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 20:54'!testCanNotImportSuppliersExistingCustomerRecordWithLessThanFiveFields		self		should: [ self importSuppliersFrom: self suppliersExistingCustomerWithLessThanThreeFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidExistingCustomerRecordErrorDescription .			self assert: self alwaysImportedSupplier customersIsEmpty  ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 19:04'!testCanNotImportAddressWithoutSupplier	self		should: [ self importSuppliersFrom: self addressWithoutPartyTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter addressWithoutPartyErrorDescription.			self assert: system isSuppliersEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 18:54'!testCanNotImportSupplierRecordWithMoreThanFourFields	self		should: [ self				importSuppliersFrom: self supplierRecordWithMoreThanFourFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: SupplierImporter invalidSupplierRecordErrorDescription.			self assert: system isSuppliersEmpty ]! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 21:18'!testImportSupplier	self importCustomersFrom: self validTestCustomerData.	self importSuppliersFrom: self validTestSupplierData.	self assertImportedSupplierSizeIsCorrect.	self assertSupplier1WasImportedCorrectly.! !!ErpImportTest methodsFor: 'testing - suppliers' stamp: 'NicolasLen 11/21/2017 19:25'!testEmptyLinesWhenImportSuppliersAreRecognizedAsInvalidRecords		self		should: [ self importSuppliersFrom: self supplierDataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: SupplierImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedSupplier addressesIsEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'Julian 11/16/2017 19:21'!testShouldNotImportCustomerRecordsStartingWithMoreThanC	self		should: [ self				importCustomersFrom: self customerRecordStartingWithMoreThanOneCTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: system isCustomersEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'NicolasLen 11/21/2017 19:13'!testCanNotImportCustomerAddressRecordWithLessThanSixFields		self		should: [ self importCustomersFrom: self customerAddressRecordWithLessThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'NicolasLen 11/21/2017 19:14'!testCanNotImportCustomerAddressRecordWithMoreThanSixFields	self 		should: [ self importCustomersFrom: self customerAddressRecordWithMoreThanSixFieldsTestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidAddressRecordErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'Julian 11/16/2017 19:21'!testCanNotImportCustomerRecordWithMoreThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithMoreThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'NicolasLen 11/21/2017 19:04'!testCanNotImportAddressWithoutCustomer	self		should: [ self importCustomersFrom: self addressWithoutPartyTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter addressWithoutPartyErrorDescription.			self assert: system isCustomersEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'Julian 11/16/2017 19:21'!testCanNotImportCustomerRecordWithLessThanFiveFields	self		should: [ self				importCustomersFrom: self customerRecordWithLessThanFiveFieldsTestData ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self				assert: anError messageText				equals: CustomerImporter invalidCustomerRecordErrorDescription.			self assert: system isCustomersEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'NicolasLen 11/21/2017 19:25'!testEmptyLinesWhenImportCustomersAreRecognizedAsInvalidRecords		self		should: [ self importCustomersFrom: self customerDataWithEmptyLine ]		raise: Error - MessageNotUnderstood		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'NicolasLen 11/21/2017 19:19'!testShouldNotImportCustomerAddressRecordsStartingWithMoreThanA	self 		should: [ self importCustomersFrom: self customerAddressRecordStartingWithMoreThanOneATestData ]		raise: Error - MessageNotUnderstood 		withExceptionDo: [ :anError | 			self assert: anError messageText equals: CustomerImporter invalidRecordTypeErrorDescription.			self assert: self alwaysImportedCustomer addressesIsEmpty ]	! !!ErpImportTest methodsFor: 'testing - customers' stamp: 'NicolasLen 11/21/2017 18:34'!testImportCustomers	self importCustomersFrom: self validTestCustomerData.	self assertImportedCustomersSizeIsCorrect.	self assertPepeSanchezWasImportedCorrectly.	self assertJuanPerezWasImportedCorrectly! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:14'!customerAddressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedCustomerRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:14'!supplierAddressRecordStartingWithMoreThanOneATestData		^ ReadStream on: self alwaysImportedSupplierRecord,'AA,San Martin,3322,Olivos,1636,BsAs'! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:13'!customerAddressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636'! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:16'!supplierAddressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:14'!customerAddressRecordWithMoreThanSixFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs,y otra cosa'! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:15'!supplierAddressRecordWithLessThanSixFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636'! !!ErpImportTest methodsFor: 'test data - address' stamp: 'NicolasLen 11/21/2017 19:03'!addressWithoutPartyTestData		^ ReadStream on: 'A,San Martin,3322,Olivos,1636,BsAs'! !!ErpImportTest methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 18:23'!assertJuanPerezWasImportedCorrectly	| customer idType idNumber |	idType := 'C'.	idNumber := '23-25666777-9'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assertCustomer: customer		isNamed: 'Juan'		lastName: 'Perez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 1.	self		assertCustomer: customer		hasAddressAt: 'Alem'		number: 1122		in: 'CABA'		zipCode: 1001		province: 'CABA'! !!ErpImportTest methodsFor: 'asserting' stamp: 'Julian 11/16/2017 19:23'!assertImportedCustomersSizeIsCorrect	self assert: system allCustomersSize equals: 2! !!ErpImportTest methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 18:43'!assertPepeSanchezWasImportedCorrectly	| customer idType idNumber |	idType := 'D'.	idNumber := '5456774'.	customer := system		customerIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assertCustomer: customer		isNamed: 'Pepe'		lastName: 'Sanchez'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2.	self		assertCustomer: customer		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assertCustomer: customer		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!ErpImportTest methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 18:23'!assertCustomer: customer isNamed: firstName lastName: lastName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize	self assert: customer firstName equals: firstName.	self assert: customer lastName equals: lastName.	self assert: customer identificationType equals: idType.	self assert: customer identificationNumber equals: idNumber.	self assert: customer numberOfAddresses equals: addressesSize .! !!ErpImportTest methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 18:23'!assertCustomer: customer hasAddressAt: streetName number: streetNumber in: town zipCode: zipCode province: province	| address |		address := customer addressAt: streetName ifNone: [ self fail ].	self assert: address streetName equals: streetName.	self assert: address streetNumber equals: streetNumber.	self assert: address town equals: town.	self assert: address zipCode equals: zipCode.	self assert: address province equals: province.	! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 18:52'!supplierRecordWithLessThanFourFieldsTestData		^ ReadStream on: 'S,Supplier1,D'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 20:35'!suppliersNewCustomerWithMoreThanFiveFieldsTestData	^ ReadStream on: self alwaysImportedSupplierRecord, 'NC,Julian,Martinez,D,223334444,aEC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 19:25'!supplierDataWithEmptyLine		^ ReadStream on: self alwaysImportedSupplierRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 18:59'!alwaysImportedSupplierRecord	^ 'S,Supplier1,', self alwaysImportedSupplierIdType, ',', self alwaysImportedSupplierIdNumber ! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 20:57'!suppliersExistingCustomerWithMoreThanThreeFieldsTestData	^ ReadStream on: self alwaysImportedSupplierRecord, 'EC,D,5456774,aA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 19:00'!validTestSupplierData	^ ReadStream on: 	self alwaysImportedSupplierRecord, 'NC,Julian,Martinez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 18:45'!assertSupplier1WasImportedCorrectly	| supplier idType idNumber |	idType := 'D'.	idNumber := '123'.	supplier := system		supplierIdentifiedAs: idType		numbered: idNumber		ifNone: [ self fail ].	self		assertSupplier: supplier		isNamed: 'Supplier1'		identfiedAs: idType		withNumber: idNumber		andNumberOfAddresses: 2		andNumberOfCustomers: 2.	self		assertCustomer: supplier		hasAddressAt: 'San Martin'		number: 3322		in: 'Olivos'		zipCode: 1636		province: 'BsAs'.	self		assertCustomer: supplier		hasAddressAt: 'Maipu'		number: 888		in: 'Florida'		zipCode: 1122		province: 'Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 19:01'!alwaysImportedSupplierIdType	^ 'D'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 20:57'!suppliersExistingCustomerWithLessThanThreeFieldsTestData	^ ReadStream on: self alwaysImportedSupplierRecord, 'EC,DA,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 19:21'!supplierRecordStartingWithMoreThanOneSTestData		^ ReadStream on:'SS,Supplier1,D,123'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 19:02'!supplierRecordWithMoreThanFourFieldsTestData		^ ReadStream on: self alwaysImportedSupplierRecord, ',aaaa'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 18:22'!assertImportedSupplierSizeIsCorrect	self assert: system allSuppliersSize equals: 1! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 20:44'!supplierNewCostumersRecordStartingDifferentThanNCTestData	^ ReadStream on: 	self alwaysImportedSupplierRecord, 'NNC,Julian,Martinez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 20:34'!suppliersNewCustomerWithLessThanFiveFieldsTestData	^ ReadStream on: self alwaysImportedSupplierRecord, 'NC,Julian,Martinez,DEC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 18:59'!alwaysImportedSupplierIdNumber	^ '123'! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 19:11'!alwaysImportedSupplier	^ system		supplierIdentifiedAs: self alwaysImportedSupplierIdType		numbered: self alwaysImportedSupplierIdNumber		ifNone: [ self fail ]! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 18:26'!assertSupplier: supplier isNamed: businessName identfiedAs: idType withNumber: idNumber andNumberOfAddresses: addressesSize andNumberOfCustomers: customersSize	self assert: supplier businessName equals: businessName.	self assert: supplier identificationType equals: idType.	self assert: supplier identificationNumber equals: idNumber.	self assert: supplier numberOfAddresses equals: addressesSize .	self assert: supplier numberOfCustomers equals: customersSize .! !!ErpImportTest methodsFor: 'test data - supplier' stamp: 'NicolasLen 11/21/2017 20:57'!supplierExistingCostumersRecordStartingDifferentThanECTestData	^ ReadStream on: 	self alwaysImportedSupplierRecord, 'EEC,Julian,Martinez,D,22333444EC,D,5456774A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos Aires'! !!ErpImportTest methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/22/2017 20:37'!setUp	system := Environment current createErpSystem.	system start.	system beginTransaction.! !!ErpImportTest methodsFor: 'setup-teardown' stamp: 'Julian 11/16/2017 19:00'!tearDown	system commit.	system stop! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:53'!customerRecordWithMoreThanFiveFieldsTestData		^ ReadStream on: self alwaysImportedCustomerRecord,',x'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'Julian 11/16/2017 19:18'!alwaysImportedCustomer	^ system		customerIdentifiedAs: self alwaysImportedCustomerIdType		numbered: self alwaysImportedCustomerIdNumber		ifNone: [ self fail ]! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'NicolasLen 11/21/2017 18:39'!alwaysImportedCustomerIdNumber	^ '5456774'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'NicolasLen 11/21/2017 19:25'!customerDataWithEmptyLine		^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAs'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'NicolasLen 11/21/2017 18:34'!validTestCustomerData	^ ReadStream on: self alwaysImportedCustomerRecord,'A,San Martin,3322,Olivos,1636,BsAsA,Maipu,888,Florida,1122,Buenos AiresC,Juan,Perez,C,23-25666777-9A,Alem,1122,CABA,1001,CABA'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:46'!alwaysImportedCustomerIdType	^ 'D'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/2/2016 10:50'!customerRecordWithLessThanFiveFieldsTestData		^ ReadStream on: 'C,Pepe,Sanchez,D'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'HernanWilkinson 11/1/2016 17:48'!customerRecordStartingWithMoreThanOneCTestData		^ ReadStream on:'CC,Pepe,Sanchez,D,22333444'! !!ErpImportTest methodsFor: 'test data - customer' stamp: 'NicolasLen 11/21/2017 18:57'!alwaysImportedCustomerRecord	^ 'C,Pepe,Sanchez,', self alwaysImportedCustomerIdType, ',', self alwaysImportedCustomerIdNumber ! !!ErpImportTest methodsFor: 'importing' stamp: 'Julian 11/13/2017 21:39'!importCustomersFrom: inputStream	(CustomerImporter from: inputStream on: system) import! !!ErpImportTest methodsFor: 'importing' stamp: 'NicolasLen 11/21/2017 18:28'!importSuppliersFrom: inputStream	(SupplierImporter from: inputStream on: system) import! !Object subclass: #ErpSystem	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!ErpSystem methodsFor: 'customers' stamp: 'NicolasLen 11/21/2017 17:53'!isSuppliersEmpty
	self subclassResponsibility! !!ErpSystem methodsFor: 'customers' stamp: 'NicolasLen 11/21/2017 17:46'!isCustomersEmpty
	self subclassResponsibility! !!ErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/22/2017 00:11'!persist: newCustomer
	self subclassResponsibility! !!ErpSystem methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 17:46'!allCustomersSize
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:46'!commit
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:46'!closeSession
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:46'!beginTransaction
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:46'!start
	self subclassResponsibility! !!ErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:46'!stop
	self subclassResponsibility! !!ErpSystem methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/21/2017 17:46'!allSuppliersSize
	self subclassResponsibility! !!ErpSystem methodsFor: 'importing' stamp: 'NicolasLen 11/21/2017 17:47'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	self subclassResponsibility! !!ErpSystem methodsFor: 'importing' stamp: 'NicolasLen 11/21/2017 17:47'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock
	self subclassResponsibility! !Object subclass: #Identification	instanceVariableNames: 'type number'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Identification methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 16:50'!number	^ number! !!Identification methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 16:50'!number: anObject	number := anObject! !!Identification methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 16:50'!type	^ type! !!Identification methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 16:50'!type: anObject	type := anObject! !Object subclass: #Importer	instanceVariableNames: 'line readStream record system newParty'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Importer methodsFor: 'importing' stamp: 'NicolasLen 11/19/2017 16:39'!import	[ self canImportNextLine ] whileTrue: [ 		self convertLineToRecord.		self importRecord ]! !!Importer methodsFor: 'importing' stamp: 'NicolasLen 11/19/2017 16:40'!importRecord		self subclassResponsibility ! !!Importer methodsFor: 'importing - private - address' stamp: 'NicolasLen 11/19/2017 19:12'!assertValidAddressRecordSize		record size ~= 6 ifTrue: [ self signalInvalidAddressRecord ].	! !!Importer methodsFor: 'importing - private - address' stamp: 'NicolasLen 11/19/2017 17:51'!assertThereIsPartyForAddress	newParty isNil ifTrue: [ self signalAddressWithoutPartyError ].	! !!Importer methodsFor: 'importing - private - address' stamp: 'NicolasLen 11/19/2017 16:42'!isAddressRecord	^ record first = 'A'! !!Importer methodsFor: 'importing - private - address' stamp: 'NicolasLen 11/19/2017 17:51'!importAddress	| newAddress |	self assertThereIsPartyForAddress.	self assertValidAddressRecordSize.		newAddress := Address new.	newAddress streetName: record second.	newAddress streetNumber: record third asInteger.	newAddress town: record fourth.	newAddress zipCode: record fifth asInteger.	newAddress province: record sixth.	^ newParty addAddress: newAddress! !!Importer methodsFor: 'importing - private' stamp: 'NicolasLen 11/19/2017 15:43'!convertLineToRecord	record := line substrings: {$,}.		self assertRecordNotEmpty! !!Importer methodsFor: 'importing - private' stamp: 'NicolasLen 11/19/2017 15:35'!canImportNextLine	line := readStream nextLine.	^ line notNil! !!Importer methodsFor: 'importing - private' stamp: 'NicolasLen 11/19/2017 15:42'!assertRecordNotEmpty		record isEmpty ifTrue: [ self signalInvalidRecordType ]! !!Importer methodsFor: 'error signal' stamp: 'NicolasLen 11/19/2017 17:51'!signalAddressWithoutPartyError	self error: self class addressWithoutPartyErrorDescription.! !!Importer methodsFor: 'error signal' stamp: 'NicolasLen 11/19/2017 18:52'!signalInvalidCustomerRecord 		self error: self class invalidCustomerRecordErrorDescription ! !!Importer methodsFor: 'error signal' stamp: 'NicolasLen 11/19/2017 17:30'!signalInvalidAddressRecord 		self error: self class invalidAddressRecordErrorDescription ! !!Importer methodsFor: 'error signal' stamp: 'NicolasLen 11/19/2017 15:41'!signalInvalidRecordType	self error: self class invalidRecordTypeErrorDescription! !!Importer methodsFor: 'importing - private - customer' stamp: 'NicolasLen 11/19/2017 18:52'!assertValidCustomerRecordSize		record size ~= 5 ifTrue: [ self signalInvalidCustomerRecord ].	! !!Importer methodsFor: 'importing - private - customer' stamp: 'NicolasLen 11/22/2017 20:29'!readCustomer	| newCustomer |	self assertValidCustomerRecordSize.	newCustomer := Customer new.	newCustomer firstName: record second.	newCustomer lastName: record third.	newCustomer identificationType: record fourth.	newCustomer identificationNumber: record fifth.	^ newCustomer! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Importer class	instanceVariableNames: ''!!Importer class methodsFor: 'error descriptions' stamp: 'NicolasLen 11/19/2017 15:40'!invalidRecordTypeErrorDescription		^'Invalid record type'! !!Importer class methodsFor: 'error descriptions' stamp: 'NicolasLen 11/19/2017 17:50'!addressWithoutPartyErrorDescription		^'There is no Entity for the imported address'! !!Importer class methodsFor: 'error descriptions' stamp: 'NicolasLen 11/19/2017 18:52'!invalidCustomerRecordErrorDescription		^'Invalid customer record'! !!Importer class methodsFor: 'error descriptions' stamp: 'NicolasLen 11/19/2017 17:30'!invalidAddressRecordErrorDescription		^'Invalid address record'! !Importer subclass: #CustomerImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!CustomerImporter methodsFor: 'importing - private' stamp: 'NicolasLen 11/21/2017 22:12'!importRecord		self isCustomerRecord ifTrue: [ ^self importCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].		self signalInvalidRecordType! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'HernanWilkinson 11/2/2016 10:55'!isCustomerRecord	^ record first = 'C'! !!CustomerImporter methodsFor: 'importing - private - customer' stamp: 'NicolasLen 11/22/2017 20:29'!importCustomer	newParty := self readCustomer.	system persist: newParty.! !!CustomerImporter methodsFor: 'initialization' stamp: 'Julian 11/16/2017 19:25'!initializeOn: aReadStream on: aCustomerSystem	readStream := aReadStream.	system := aCustomerSystem.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CustomerImporter class	instanceVariableNames: ''!!CustomerImporter class methodsFor: 'instance creation' stamp: 'Julian 11/16/2017 19:25'!from: aReadStream on: aCustomerSystem	^self new initializeOn: aReadStream on: aCustomerSystem! !Environment subclass: #IntegrationEnvironment	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!IntegrationEnvironment methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/21/2017 17:54'!createErpSystem		^PersistentErpSystem new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!IntegrationEnvironment class	instanceVariableNames: ''!!IntegrationEnvironment class methodsFor: 'testing' stamp: 'NicolasLen 11/22/2017 00:23'!isCurrent		^true.! !Object subclass: #Party	instanceVariableNames: 'identification addresses'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Party methodsFor: 'identification' stamp: 'NicolasLen 11/19/2017 16:50'!identificationType: anIdentificationType 	identification type: anIdentificationType! !!Party methodsFor: 'identification' stamp: 'NicolasLen 11/19/2017 16:50'!identificationNumber: anIdentificationNumber 	identification number: anIdentificationNumber! !!Party methodsFor: 'identification' stamp: 'NicolasLen 11/19/2017 16:50'!identificationType		^identification type ! !!Party methodsFor: 'identification' stamp: 'NicolasLen 11/19/2017 16:50'!identificationNumber		^identification number ! !!Party methodsFor: 'testing' stamp: 'NicolasLen 11/19/2017 16:54'!isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber		^anIdentifycationType = (identification type) and: [ anIdentificationNumber = (identification number) ].! !!Party methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/19/2017 16:53'!addressesIsEmpty		^addresses isEmpty! !!Party methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/19/2017 16:53'!addressAt: aStreetName ifNone: noneClosure 		^addresses detect: [ :anAddress | anAddress isAt: aStreetName ] ifNone: noneClosure ! !!Party methodsFor: 'addresses' stamp: 'NicolasLen 11/19/2017 16:54'!numberOfAddresses		^addresses size! !!Party methodsFor: 'addresses' stamp: 'NicolasLen 11/19/2017 16:53'!addAddress: anAddress 	addresses add: anAddress ! !!Party methodsFor: 'addresses' stamp: 'NicolasLen 11/19/2017 16:53'!addresses	^ addresses! !!Party methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 17:18'!initialize	super initialize.	addresses := OrderedCollection new.	identification := Identification new.! !Party subclass: #Customer	instanceVariableNames: 'id firstName lastName'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!lastName	^lastName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!lastName: aLastName 	lastName := aLastName! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 16:15'!firstName		^firstName ! !!Customer methodsFor: 'name' stamp: 'HernanWilkinson 10/28/2016 13:09'!firstName: aName 	firstName := aName! !ErpSystem subclass: #PersistentErpSystem	instanceVariableNames: 'session'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!PersistentErpSystem methodsFor: 'customers' stamp: 'NicolasLen 11/21/2017 17:50'!isCustomersEmpty	^ (session selectAllOfType: Customer) isEmpty! !!PersistentErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/22/2017 00:12'!persist: newParty	session persist: newParty! !!PersistentErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/21/2017 18:16'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| suppliers |		suppliers := session		select: [ :aSupplier | 			aSupplier identificationType = anIdentifycationType				and: [ aSupplier identificationNumber = anIdentificationNumber ] ]		ofType: Supplier.			^suppliers size = 1		ifTrue: [ suppliers anyOne ]		ifFalse: noneBlock.! !!PersistentErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/21/2017 17:50'!isSuppliersEmpty	^ (session selectAllOfType: Supplier) isEmpty! !!PersistentErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/21/2017 17:50'!initialize	super initialize.	self initializeSession.! !!PersistentErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/21/2017 21:59'!supplierMapping	^ ClassMapping		withDefaultTableNameFor: Supplier		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #identification)				with: (EmbededMapping withDefaultFieldNameFor: #businessName)				with: (OneToManyMapping withDefaultFieldNameFor: #customers ofType: Customer)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentErpSystem methodsFor: 'as yet unclassified' stamp: 'NicolasLen 11/21/2017 17:50'!allSuppliersSize	^ (session selectAllOfType: Supplier) size! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 21:59'!customerMapping	^ ClassMapping		withDefaultTableNameFor: Customer		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #identification)				with: (EmbededMapping withDefaultFieldNameFor: #firstName)				with: (EmbededMapping withDefaultFieldNameFor: #lastName)				with: (OneToManyMapping withDefaultFieldNameFor: #addresses ofType: Address))! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!commit	session commit! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!addressMapping	^ ClassMapping		withDefaultTableNameFor: Address		mappingAll:			(Array				with: (EmbededMapping withDefaultFieldNameFor: #streetName)				with: (EmbededMapping withDefaultFieldNameFor: #streetNumber)				with: (EmbededMapping withDefaultFieldNameFor: #town)				with: (EmbededMapping withDefaultFieldNameFor: #zipCode)				with: (EmbededMapping withDefaultFieldNameFor: #province))! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!beginTransaction	session beginTransaction.! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!start	session open.! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:57'!initializeSession	session := DataBaseSession		for: (Array with: self addressMapping with: self customerMapping with: self supplierMapping)! !!PersistentErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!stop	session close! !!PersistentErpSystem methodsFor: 'importing' stamp: 'NicolasLen 11/21/2017 17:50'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	| customers |		customers := session		select: [ :aCustomer | 			aCustomer identificationType = anIdentifycationType				and: [ aCustomer identificationNumber = anIdentificationNumber ] ]		ofType: Customer.			^customers size = 1		ifTrue: [ customers anyOne ]		ifFalse: noneBlock.! !!PersistentErpSystem methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 17:50'!allCustomersSize	^ (session selectAllOfType: Customer) size! !Party subclass: #Supplier	instanceVariableNames: 'id businessName customers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 16:52'!businessName	^ businessName! !!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 18:00'!numberOfCustomers		^customers size! !!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 17:57'!customers	 ^customers! !!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 18:01'!customersIsEmpty		^customers isEmpty! !!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 16:52'!businessName: anObject	businessName := anObject! !!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/19/2017 18:51'!initialize	super initialize.	customers := OrderedCollection new.! !!Supplier methodsFor: 'accessing' stamp: 'NicolasLen 11/22/2017 20:11'!addCustomer: aCustomer 	customers add: aCustomer! !Importer subclass: #SupplierImporter	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 18:10'!assertValidExistingCustomerRecordSize		record size ~= 3 ifTrue: [ self signalInvalidExistingCustomerRecord ].! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/22/2017 20:12'!importExistingCustomer	| existingCustomer |	self assertValidExistingCustomerRecordSize.	existingCustomer := system		customerIdentifiedAs: record second		numbered: record third		ifNone: [ self fail ].	newParty addCustomer: existingCustomer.! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 18:10'!signalInvalidExistingCustomerRecord 		self error: self class invalidExistingCustomerRecordErrorDescription ! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 18:13'!importRecord		self isSupplierRecord ifTrue: [ ^self importSupplier ].	self isNewCustomerRecord ifTrue: [ ^self importCustomer ].	self isExistingCustomerRecord ifTrue: [ ^self importExistingCustomer ].	self isAddressRecord ifTrue: [ ^self importAddress ].			self signalInvalidRecordType! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 16:42'!isExistingCustomerRecord	^ record first = 'EC'! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 16:41'!isSupplierRecord	^ record first = 'S'! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 17:32'!signalInvalidSupplierRecord 		self error: self class invalidSupplierRecordErrorDescription ! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 15:34'!initializeOn: aReadStream on: aSupplierSystem	readStream := aReadStream.	system := aSupplierSystem.! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/22/2017 20:29'!importCustomer	| newCustomer |	newCustomer := self readCustomer.	newParty addCustomer: newCustomer.! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/22/2017 00:13'!importSupplier	self assertValidSupplierRecordSize.	newParty := Supplier new.	newParty businessName: record second.	newParty identificationType: record third.	newParty identificationNumber: record fourth .	system persist: newParty! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 17:32'!assertValidSupplierRecordSize		record size ~= 4 ifTrue: [ self signalInvalidSupplierRecord ].! !!SupplierImporter methodsFor: 'initialization' stamp: 'NicolasLen 11/19/2017 16:41'!isNewCustomerRecord	^ record first = 'NC'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SupplierImporter class	instanceVariableNames: ''!!SupplierImporter class methodsFor: 'instance creation' stamp: 'NicolasLen 11/19/2017 18:11'!invalidExistingCustomerRecordErrorDescription		^'Invalid existing customer record'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'NicolasLen 11/19/2017 17:25'!invalidSupplierRecordErrorDescription		^'Invalid supplier record'! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'NicolasLen 11/19/2017 15:34'!from: aReadStream on: aSupplierSystem	^self new initializeOn: aReadStream on: aSupplierSystem! !!SupplierImporter class methodsFor: 'instance creation' stamp: 'NicolasLen 11/19/2017 17:34'!addressWithoutSupplierErrorDescription		^'There is no Supplier for the imported address'! !ErpSystem subclass: #TransientErpSystem	instanceVariableNames: 'customers suppliers'	classVariableNames: ''	poolDictionaries: ''	category: '10Pines-C17-2-Model'!!TransientErpSystem methodsFor: 'accessing' stamp: 'NicolasLen 11/22/2017 00:20'!persist: newParty	(newParty isKindOf: Customer) ifTrue: [ ^customers add: newParty ].	(newParty isKindOf: Supplier) ifTrue: [ ^suppliers add: newParty ].! !!TransientErpSystem methodsFor: 'customers' stamp: 'NicolasLen 11/21/2017 17:52'!isSuppliersEmpty	^suppliers isEmpty .! !!TransientErpSystem methodsFor: 'customers' stamp: 'NicolasLen 11/21/2017 17:50'!isCustomersEmpty	^customers isEmpty .! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!commit! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:56'!start	customers := OrderedCollection new.	suppliers := OrderedCollection new.! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!beginTransaction! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 21:02'!closeSession! !!TransientErpSystem methodsFor: 'setup-teardown' stamp: 'NicolasLen 11/21/2017 17:50'!stop! !!TransientErpSystem methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 17:50'!allCustomersSize	^customers size! !!TransientErpSystem methodsFor: 'asserting' stamp: 'NicolasLen 11/21/2017 17:52'!allSuppliersSize	^suppliers size! !!TransientErpSystem methodsFor: 'importing' stamp: 'NicolasLen 11/21/2017 17:53'!supplierIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^suppliers		detect: [ :aSupplier | aSupplier isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] 		ifFound: [ :aSupplier | aSupplier ]		ifNone: noneBlock! !!TransientErpSystem methodsFor: 'importing' stamp: 'NicolasLen 11/21/2017 17:50'!customerIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ifNone: noneBlock	^customers		detect: [ :aCustomer | aCustomer isIdentifiedAs: anIdentifycationType numbered: anIdentificationNumber ] 		ifFound: [ :aCustomer | aCustomer ]		ifNone: noneBlock! !